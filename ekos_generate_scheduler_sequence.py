#Generate the Ekos scheduler sequence, with settings:
#- map the Milky Way plane, with steps of 5 degrees in Galactic longitude,
#- use Ekos's greedy scheduler
#- use Ekos's repeat until terminated option, to gather as many visits as possible
#- use Ekos's remember job progress, to pick it up from one night to the next
#- set an altitude limit of 20 degrees, to avoid hitting the mount and for ground pick up
#- for each target, perform the same capture sequence saved locally.
#- each targetis in the same "group", so that the scheduler will try to build depth uniformly
#
#This script was generated by ChatGPT, after I showed it the script generated with the Ekos GUI
#for only the first target.

import numpy as np
from astropy.coordinates import SkyCoord
import astropy.units as u

# Generate galactic longitudes from 0, then alternate ±5, ±10, ..., ±180
l_positive = np.arange(5, 181, 5)
l_negative = -l_positive[::-1]
l_vals = np.array([0] + [val for pair in zip(l_positive, l_negative) for val in pair])
b_vals = np.zeros_like(l_vals)

# Convert galactic to equatorial
gal = SkyCoord(l=l_vals * u.deg, b=b_vals * u.deg, frame='galactic')
eq = gal.icrs
ra_vals = eq.ra  # hours by default
dec_vals = eq.dec  # degrees

# File paths
capture_sequence_path = "/home/stellarmate/Documents/sequences/21cm/ekos_capture_sequence_21cm5min_dslr7.5min.esq"
output_scheduler_path = "/home/stellarmate/Documents/scheduler/21cm/ekos_scheduler_sequence_milkywayplane_5deglonstep_chatgpt.esl"

# XML header
scheduler_xml = """<?xml version="1.0" encoding="UTF-8"?>
<SchedulerList version='2.1'>
<Profile>Default</Profile>
"""

# Generate jobs
for l, ra, dec in zip(l_vals, ra_vals, dec_vals):
    target_name = f"milkywayplane_l{l:+03d}"
    job = f"""
<Job>
  <JobType lead='true'/>
  <Name>{target_name}</Name>
  <Group>milkywayplane</Group>
  <Coordinates>
    <J2000RA>{ra.hour:.5f}</J2000RA>
    <J2000DE>{dec.deg:.5f}</J2000DE>
  </Coordinates>
  <PositionAngle>-181</PositionAngle>
  <Sequence>{capture_sequence_path}</Sequence>
  <StartupCondition>
    <Condition>ASAP</Condition>
  </StartupCondition>
  <Constraints>
    <Constraint value='20'>MinimumAltitude</Constraint>
    <Constraint>EnforceTwilight</Constraint>
    <Constraint>EnforceArtificialHorizon</Constraint>
  </Constraints>
  <CompletionCondition>
    <Condition>Loop</Condition>
  </CompletionCondition>
  <Steps>
    <Step>Track</Step>
    <Step>Align</Step>
  </Steps>
</Job>
"""
    scheduler_xml += job

# Add footer (scheduler settings)
scheduler_xml += """
<SchedulerAlgorithm value='1'/>
<ErrorHandlingStrategy value='0'>
  <delay>0</delay>
</ErrorHandlingStrategy>
<StartupProcedure>
</StartupProcedure>
<ShutdownProcedure>
</ShutdownProcedure>
</SchedulerList>
"""

# Write to file
with open(output_scheduler_path, "w") as f:
    f.write(scheduler_xml)

print(f"Scheduler sequence saved to: {output_scheduler_path}")
